package com.webweeb.backend.security;import io.jsonwebtoken.Claims;import io.jsonwebtoken.Jwts;import io.jsonwebtoken.SignatureAlgorithm;import io.jsonwebtoken.security.Keys;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import java.security.Key;import java.util.Date;import java.util.function.Function;@Component@Slf4jpublic class JwtUtil {    @Value("${jwt.secret}")    private String secret;    @Value("${jwt.expiration}")    private long expiration;    private Key getSecretKey() {        return Keys.hmacShaKeyFor(secret.getBytes());    }    public String generateToken(String username) {        return Jwts.builder()                .setSubject(username)                .setIssuedAt(new Date())                .setExpiration(new Date(System.currentTimeMillis() + expiration))                .signWith(getSecretKey(), SignatureAlgorithm.HS256)                .compact();    }    public String extractUsername(String token) {        return extractAllClaims(token, Claims::getSubject);    }    public Date extractExpiration(String token) {        return extractAllClaims(token, Claims::getExpiration);    }    private Claims extractClaims(String token) {        return Jwts.parserBuilder()                .setSigningKey(getSecretKey())                .build()                .parseClaimsJws(token)                .getBody();    }    private <T> T extractAllClaims(String token, Function<Claims, T> claimsResolver) {        final Claims claims = extractClaims(token);        return claimsResolver.apply(claims);    }    private boolean isTokenExpired(String token) {        return extractExpiration(token).before(new Date());    }    public boolean validateToken(String token, String username) {        return (username.equals(extractUsername(token)) && !isTokenExpired(token));    }}