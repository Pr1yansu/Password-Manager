package com.webweeb.backend.security;import com.webweeb.backend.service.UserService;import io.jsonwebtoken.ExpiredJwtException;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import lombok.RequiredArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Lazy;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;import org.springframework.stereotype.Component;import org.springframework.web.filter.OncePerRequestFilter;import java.io.IOException;@Component@RequiredArgsConstructorpublic class JwtAuthenticationFilter extends OncePerRequestFilter {    @Autowired    private JwtUtil jwtTokenUtil;    @Autowired    @Lazy    private UserService userService;    @Value("${jwt.header}")    private String header;    @Value("${jwt.prefix}")    private String prefix;    @Override    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {        final String authorizationHeader = request.getHeader(header);        if (authorizationHeader == null || !authorizationHeader.startsWith(prefix + " ")) {            filterChain.doFilter(request, response);            return;        }        final String token = authorizationHeader.substring(7);        String username = null;        try {            username = jwtTokenUtil.extractUsername(token);        } catch (ExpiredJwtException e) {            logger.warn("Jwt has expired");        } catch (Exception e) {            logger.warn("Jwt is invalid");        }        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {            UserDetails userDetails = userService.loadUserByUsername(username);            if (jwtTokenUtil.validateToken(token, userDetails.getUsername())) {                UsernamePasswordAuthenticationToken                        authenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());                authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));                SecurityContextHolder.getContext().setAuthentication(authenticationToken);            }        }        filterChain.doFilter(request, response);    }}