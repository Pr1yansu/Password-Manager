package com.webweeb.backend.entity;import jakarta.persistence.*;import lombok.*;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.UUID;@EqualsAndHashCode(callSuper = true)@Entity@Data@AllArgsConstructor@NoArgsConstructor@Builder@Table(name = "\"user\"")public class User extends BaseEntity implements UserDetails {    @Column(unique = true)    private String username;    @Column    private String password;    @Column    private String profilePicture;    @Column(unique = true)    private String email;    @Column    private UUID secretKey;    @Column    private boolean enabled = true;    @Column    private boolean accountNonExpired = true;    @Column    private boolean accountNonLocked = true;    @Column    private boolean credentialsNonExpired = true;    @ManyToMany(fetch = FetchType.EAGER, cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})    @JoinTable(            name = "user_role",            joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id"),            inverseJoinColumns = @JoinColumn(name = "role_id", referencedColumnName = "id")    )    private List<Role> roles = new ArrayList<>();    @OneToMany(mappedBy = "user", fetch = FetchType.LAZY)    private List<PasswordAccount> passwordAccounts;    @OneToMany(mappedBy = "user", fetch = FetchType.LAZY)    private List<PasswordGenerator> passwordGenerators;    @OneToMany(mappedBy = "user", fetch = FetchType.LAZY)    private List<LoginHistory> loginHistories;    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        return roles;    }    @Override    public boolean isAccountNonExpired() {        return accountNonExpired;    }    @Override    public boolean isAccountNonLocked() {        return accountNonLocked;    }    @Override    public boolean isCredentialsNonExpired() {        return credentialsNonExpired;    }    @Override    public boolean isEnabled() {        return enabled;    }}