package com.webweeb.backend.service;import com.webweeb.backend.dto.LoginHistoryDTO;import com.webweeb.backend.entity.LoginHistory;import com.webweeb.backend.entity.User;import com.webweeb.backend.repository.LoginHistoryRepo;import com.webweeb.backend.repository.UserRepo;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Service;import java.util.List;import java.util.stream.Collectors;@Servicepublic class LoginHistoryService {    @Autowired    private LoginHistoryRepo loginHistoryRepo;    @Autowired    private UserRepo userRepo;    @Autowired    private UserService userService;    @Autowired    private ModelMapper modelMapper;    public List<LoginHistoryDTO> getCurrentUserLoginHistory() {        String username = userService.getAuthenticatedUsername();        User user = userRepo.findByUsernameOrEmail(username, username)                .orElseThrow(() -> new UsernameNotFoundException("User not found"));        List<LoginHistory> loginHistories = loginHistoryRepo.findByUser(user);        return loginHistories.stream()                .map(this::mapFromEntity)                .collect(Collectors.toList());    }    public List<LoginHistoryDTO> analyzeLoginPatterns() {        String username = userService.getAuthenticatedUsername();        User user = userRepo.findByUsernameOrEmail(username, username)                .orElseThrow(() -> new UsernameNotFoundException("User not found"));        List<LoginHistory> loginHistories = loginHistoryRepo.findByUser(user);        return loginHistories.stream()                .filter(this::isSuspiciousLogin)                .map(this::mapFromEntity)                .collect(Collectors.toList());    }    private boolean isSuspiciousLogin(LoginHistory history) {        return history.getLocation() == null || history.getLocation().equals("Unknown");    }    private LoginHistoryDTO mapFromEntity(LoginHistory loginHistory) {        LoginHistoryDTO loginHistoryDTO = modelMapper.map(loginHistory, LoginHistoryDTO.class);        loginHistoryDTO.setUserId(loginHistory.getUser().getId());        return loginHistoryDTO;    }}