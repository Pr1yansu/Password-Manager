package com.webweeb.backend.service;import com.webweeb.backend.dto.PasswordGeneratorDTO;import com.webweeb.backend.entity.PasswordGenerator;import com.webweeb.backend.entity.User;import com.webweeb.backend.repository.PasswordGeneratorRepo;import com.webweeb.backend.repository.UserRepo;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.security.SecureRandom;import java.util.*;@Servicepublic class PasswordGeneratorService {    @Autowired    private PasswordGeneratorRepo passwordGeneratorRepo;    @Autowired    private UserService userService;    @Autowired    private UserRepo userRepo;    private final SecureRandom random = new SecureRandom();    public String generatePassword(PasswordGeneratorDTO passwordGeneratorDTO) {        String username = userService.getAuthenticatedUsername();        PasswordGenerator passwordGenerator = passwordGeneratorRepo.findByUser_Username(username)                .orElseGet(() -> {                    PasswordGenerator newPasswordGenerator = new PasswordGenerator();                    newPasswordGenerator.setUser(userRepo.findByUsernameOrEmail(username, username)                            .orElseThrow(() -> new RuntimeException("User not found")));                    newPasswordGenerator.setCharacterLength(passwordGeneratorDTO.getCharacterLength() != null ? passwordGeneratorDTO.getCharacterLength() : 12);                    newPasswordGenerator.setIncludeUppercase(passwordGeneratorDTO.getIncludeUppercase() != null ? passwordGeneratorDTO.getIncludeUppercase() : true);                    newPasswordGenerator.setIncludeLowercase(passwordGeneratorDTO.getIncludeLowercase() != null ? passwordGeneratorDTO.getIncludeLowercase() : true);                    newPasswordGenerator.setIncludeNumbers(passwordGeneratorDTO.getIncludeNumbers() != null ? passwordGeneratorDTO.getIncludeNumbers() : true);                    newPasswordGenerator.setIncludeSpecialCharacters(passwordGeneratorDTO.getIncludeSpecialCharacters() != null ? passwordGeneratorDTO.getIncludeSpecialCharacters() : true);                    return newPasswordGenerator;                });        String password = generatePasswordFromConfig(passwordGenerator);        passwordGenerator.setPassword(password);        passwordGeneratorRepo.save(passwordGenerator);        return password;    }    public boolean upsertPasswordGenerator(PasswordGeneratorDTO dto) {        String username = userService.getAuthenticatedUsername();        PasswordGenerator passwordGenerator = passwordGeneratorRepo.findByUser_Username(username)                .orElseGet(() -> {                    PasswordGenerator newGenerator = new PasswordGenerator();                    newGenerator.setUser(userRepo.findByUsernameOrEmail(username, username)                            .orElseThrow(() -> new RuntimeException("User not found")));                    return newGenerator;                });        if (dto.getCharacterLength() != null)            passwordGenerator.setCharacterLength(dto.getCharacterLength());        if (dto.getIncludeUppercase() != null)            passwordGenerator.setIncludeUppercase(dto.getIncludeUppercase());        if (dto.getIncludeLowercase() != null)            passwordGenerator.setIncludeLowercase(dto.getIncludeLowercase());        if (dto.getIncludeNumbers() != null)            passwordGenerator.setIncludeNumbers(dto.getIncludeNumbers());        if (dto.getIncludeSpecialCharacters() != null)            passwordGenerator.setIncludeSpecialCharacters(dto.getIncludeSpecialCharacters());        if (dto.getAvoidAmbiguousCharacters() != null)            passwordGenerator.setAvoidAmbiguousCharacters(dto.getAvoidAmbiguousCharacters());        if (dto.getAvoidRepetitiveCharacters() != null)            passwordGenerator.setAvoidRepetitiveCharacters(dto.getAvoidRepetitiveCharacters());        if (dto.getAvoidSequentialCharacters() != null)            passwordGenerator.setAvoidSequentialCharacters(dto.getAvoidSequentialCharacters());        if (dto.getAvoidCommonWords() != null)            passwordGenerator.setAvoidCommonWords(dto.getAvoidCommonWords());        if (dto.getAvoidCommonPhrases() != null)            passwordGenerator.setAvoidCommonPhrases(dto.getAvoidCommonPhrases());        if (dto.getAvoidKeyboardPatterns() != null)            passwordGenerator.setAvoidKeyboardPatterns(dto.getAvoidKeyboardPatterns());        if (dto.getAvoidPersonalInformation() != null)            passwordGenerator.setAvoidPersonalInformation(dto.getAvoidPersonalInformation());        if (dto.getAvoidContextualWords() != null)            passwordGenerator.setAvoidContextualWords(dto.getAvoidContextualWords());        passwordGeneratorRepo.save(passwordGenerator);        return true;    }    private String generatePasswordFromConfig(PasswordGenerator config) {        String uppercase = "ABCDEFGHJKLMNPQRSTUVWXYZ";        String lowercase = "abcdefghijkmnpqrstuvwxyz";        String numbers = "23456789";        String special = "!@#$%^&*()-_=+[]{}|;:,.<>?";        if (!config.isAvoidAmbiguousCharacters()) {            uppercase += "IO";            lowercase += "lo";            numbers += "01";        }        String charPool = "";        if (config.isIncludeUppercase()) charPool += uppercase;        if (config.isIncludeLowercase()) charPool += lowercase;        if (config.isIncludeNumbers()) charPool += numbers;        if (config.isIncludeSpecialCharacters()) charPool += special;        if (charPool.isEmpty()) throw new IllegalStateException("At least one character type must be included.");        List<Character> passwordChars = new ArrayList<>();        while (passwordChars.size() < config.getCharacterLength()) {            char nextChar = charPool.charAt(random.nextInt(charPool.length()));            if (config.isAvoidRepetitiveCharacters() &&                    !passwordChars.isEmpty() &&                    passwordChars.get(passwordChars.size() - 1) == nextChar) {                continue;            }            if (config.isAvoidSequentialCharacters() && passwordChars.size() >= 2) {                char prev = passwordChars.get(passwordChars.size() - 1);                char prevPrev = passwordChars.get(passwordChars.size() - 2);                if ((prev == prevPrev + 1 && nextChar == prev + 1) ||                        (prev == prevPrev - 1 && nextChar == prev - 1)) {                    continue;                }            }            passwordChars.add(nextChar);        }        Collections.shuffle(passwordChars);        StringBuilder finalPassword = new StringBuilder();        passwordChars.forEach(finalPassword::append);        String result = finalPassword.toString();        if (config.isAvoidCommonWords() && containsCommonWords(result)) return generatePasswordFromConfig(config);        if (config.isAvoidCommonPhrases() && containsCommonPhrases(result)) return generatePasswordFromConfig(config);        if (config.isAvoidKeyboardPatterns() && containsKeyboardPattern(result)) return generatePasswordFromConfig(config);        if (config.isAvoidPersonalInformation() && containsPersonalInfo(result)) return generatePasswordFromConfig(config);        if (config.isAvoidContextualWords() && containsContextualWords(result)) return generatePasswordFromConfig(config);        return result;    }    private boolean containsCommonWords(String password) {        String[] commonWords = {"password", "admin", "welcome", "user"};        for (String word : commonWords) {            if (password.toLowerCase().contains(word)) return true;        }        return false;    }    private boolean containsCommonPhrases(String password) {        String[] phrases = {"letmein", "iloveyou", "123456"};        for (String phrase : phrases) {            if (password.toLowerCase().contains(phrase)) return true;        }        return false;    }    private boolean containsKeyboardPattern(String password) {        String[] patterns = {"qwerty", "asdf", "zxcv"};        for (String pattern : patterns) {            if (password.toLowerCase().contains(pattern)) return true;        }        return false;    }    private boolean containsPersonalInfo(String password) {        String username = userService.getAuthenticatedUsername();        User user = userRepo.findByUsernameOrEmail(username, username)                .orElseThrow(() -> new RuntimeException("User not found"));        if (password.toLowerCase().contains(user.getUsername().toLowerCase())) return true;        if (password.toLowerCase().contains(user.getEmail().toLowerCase())) return true;        return false;    }    private boolean containsContextualWords(String password) {        String[] contextualWords = {"company", "project", "team"};        for (String word : contextualWords) {            if (password.toLowerCase().contains(word)) return true;        }        return false;    }}