package com.webweeb.backend.controller;import com.webweeb.backend.dto.LoginDTO;import com.webweeb.backend.dto.UserDTO;import com.webweeb.backend.response.ApiResponse;import com.webweeb.backend.service.UserService;import io.swagger.v3.oas.annotations.tags.Tag;import jakarta.validation.Valid;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.Map;@Slf4j@RestController@RequestMapping("/api/auth")@Tag(name = "User", description = "API for user management")public class UserController {    @Autowired    private UserService userService;    /**     * Register a new user     *     * @param userDTO User data transfer object     * @return ApiResponse containing registered user data     */    @PostMapping("/register")    public ResponseEntity<ApiResponse<Object>> registerUser(@RequestBody @Valid UserDTO userDTO) {        Object registeredUser = userService.registerUser(userDTO);        return ResponseEntity.ok(ApiResponse.success(registeredUser, "User registered successfully"));    }    /**     * Login user and return JWT token     *     * @param userDTO User credentials     * @return ApiResponse containing user data and JWT token     */    @PostMapping("/login")    public ResponseEntity<Object> loginUser(@RequestBody @Valid LoginDTO userDTO) {        Object loginResponse = userService.loginUser(userDTO);        if (loginResponse instanceof Map) {            return ResponseEntity.ok(ApiResponse.success(loginResponse, "Login successful"));        } else {            return ResponseEntity.status(401).body(ApiResponse.error("Invalid username or password", HttpStatus.UNAUTHORIZED));        }    }    /**     * Get the current user's profile     *     * @return ApiResponse containing current user data     */    @GetMapping("/profile")    public ResponseEntity<ApiResponse<UserDTO>> getCurrentUser() {        UserDTO currentUser = userService.getProfile();        return ResponseEntity.ok(ApiResponse.success(currentUser, "Current user retrieved successfully"));    }}