package com.webweeb.backend.exception;import com.webweeb.backend.response.ApiResponse;import jakarta.persistence.EntityNotFoundException;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.validation.FieldError;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.RestControllerAdvice;import java.util.HashMap;import java.util.Map;@Slf4j@RestControllerAdvicepublic class GlobalExceptionHandler {    /**     * This method handles exceptions thrown by the application.     * It logs the error message and returns a custom error response.     *     * @param ex the exception thrown     * @return a ResponseEntity containing the error response     */    @ExceptionHandler(UsernameNotFoundException.class)    public ResponseEntity<ApiResponse<String>> handleUserNotFoundException(UsernameNotFoundException ex) {        log.error("User not found: {}", ex.getMessage());        return ResponseEntity.status(HttpStatus.NOT_FOUND)                .body(ApiResponse.error(ex.getMessage(), HttpStatus.NOT_FOUND));    }    /**     * This method handles EntityNotFoundException.     * It logs the error message and returns a custom error response.     *     * @param ex the exception thrown     * @return a ResponseEntity containing the error response     */    @ExceptionHandler(EntityNotFoundException.class)    public ResponseEntity<ApiResponse<String>> handleEntityNotFoundException(EntityNotFoundException ex) {        log.error("Entity not found: {}", ex.getMessage());        return ResponseEntity.status(HttpStatus.NOT_FOUND)                .body(ApiResponse.error(ex.getMessage(), HttpStatus.NOT_FOUND));    }    /**     * This method handles BadCredentialsException.     * It logs the error message and returns a custom error response.     *     * @param ex the exception thrown     * @return a ResponseEntity containing the error response     */    @ExceptionHandler(BadCredentialsException.class)    public ResponseEntity<ApiResponse<String>> handleBadCredentialsException(BadCredentialsException ex) {        log.error("Invalid credentials: {}", ex.getMessage());        return ResponseEntity.status(HttpStatus.UNAUTHORIZED)                .body(ApiResponse.error("Invalid username or password", HttpStatus.UNAUTHORIZED));    }    /**     * This method handles MethodArgumentNotValidException.     * It logs the error message and returns a custom error response with validation errors.     *     * @param ex the exception thrown     * @return a ResponseEntity containing the error response     */    @ExceptionHandler(MethodArgumentNotValidException.class)    public ResponseEntity<ApiResponse<Map<String, String>>> handleValidationExceptions(MethodArgumentNotValidException ex) {        log.error("Validation error: {}", ex.getMessage());        Map<String, String> errors = new HashMap<>();        ex.getBindingResult().getAllErrors().forEach((error) -> {            String fieldName = ((FieldError) error).getField();            String errorMessage = error.getDefaultMessage();            errors.put(fieldName, errorMessage);        });        return ResponseEntity.status(HttpStatus.BAD_REQUEST)                .body(ApiResponse.error(errors, HttpStatus.BAD_REQUEST));    }    /**     * This method handles IllegalArgumentException.     * It logs the error message and returns a custom error response.     *     * @param ex the exception thrown     * @return a ResponseEntity containing the error response     */    @ExceptionHandler(IllegalArgumentException.class)    public ResponseEntity<ApiResponse<String>> handleIllegalArgumentException(IllegalArgumentException ex) {        log.error("Illegal argument: {}", ex.getMessage());        return ResponseEntity.status(HttpStatus.BAD_REQUEST)                .body(ApiResponse.error(ex.getMessage(), HttpStatus.BAD_REQUEST));    }    /**     * This method handles IllegalStateException.     * It logs the error message and returns a custom error response.     *     * @param ex the exception thrown     * @return a ResponseEntity containing the error response     */    @ExceptionHandler(IllegalStateException.class)    public ResponseEntity<ApiResponse<String>> handleIllegalStateException(IllegalStateException ex) {        log.error("Illegal state: {}", ex.getMessage());        return ResponseEntity.status(HttpStatus.BAD_REQUEST)                .body(ApiResponse.error(ex.getMessage(), HttpStatus.BAD_REQUEST));    }    /**     * This method handles UnsupportedOperationException.     * It logs the error message and returns a custom error response.     *     * @param ex the exception thrown     * @return a ResponseEntity containing the error response     */    @ExceptionHandler(UnsupportedOperationException.class)    public ResponseEntity<ApiResponse<String>> handleUnsupportedOperationException(UnsupportedOperationException ex) {        log.error("Unsupported operation: {}", ex.getMessage());        return ResponseEntity.status(HttpStatus.BAD_REQUEST)                .body(ApiResponse.error(ex.getMessage(), HttpStatus.BAD_REQUEST));    }    /**     * This method handles NullPointerException.     * It logs the error message and returns a custom error response.     *     * @param ex the exception thrown     * @return a ResponseEntity containing the error response     */    @ExceptionHandler(NullPointerException.class)    public ResponseEntity<ApiResponse<String>> handleNullPointerException(NullPointerException ex) {        log.error("Null pointer: {}", ex.getMessage());        return ResponseEntity.status(HttpStatus.BAD_REQUEST)                .body(ApiResponse.error(ex.getMessage(), HttpStatus.BAD_REQUEST));    }    /**     * This method handles all other exceptions.     * It logs the error message and returns a generic error response.     *     * @param ex the exception thrown     * @return a ResponseEntity containing the error response     */    @ExceptionHandler(Exception.class)    public ResponseEntity<ApiResponse<String>> handleGenericException(Exception ex) {        log.error("Unexpected error: {}", ex.getMessage());        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)                .body(ApiResponse.error("An unexpected error occurred", HttpStatus.INTERNAL_SERVER_ERROR));    }    /**     * This method handles custom application exceptions.     * It logs the error message and returns a custom error response.     *     * @param ex the AppException thrown     * @return a ResponseEntity containing the error response     */    @ExceptionHandler(AppException.class)    public ResponseEntity<ApiResponse<String>> handleAppException(AppException ex) {        log.error("Application error: {}", ex.getMessage());        return ResponseEntity.status(ex.getStatus())                .body(ApiResponse.error(ex.getMessage(), ex.getStatus()));    }}