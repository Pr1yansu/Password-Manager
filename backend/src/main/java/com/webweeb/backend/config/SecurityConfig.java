package com.webweeb.backend.config;import com.webweeb.backend.exception.CustomAuthenticationEntryPoint;import com.webweeb.backend.security.JwtAuthenticationFilter;import lombok.RequiredArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Lazy;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.CorsConfigurationSource;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import java.util.List;@Configuration@RequiredArgsConstructorpublic class SecurityConfig {    private final static List<String> allowedOrigins = List.of("http://localhost:3000", "http://localhost:3000/");    private final static List<String> allowedMethods = List.of("GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH");    private final static List<String> allowedHeaders = List.of("Authorization", "Content-Type");    private final static List<String> exposedHeaders = List.of("Authorization");    private final static boolean allowCredentials = true;    private final static long maxAge = 3600L;        @Autowired    @Lazy    private JwtAuthenticationFilter jwtAuthenticationFilter;    @Autowired    private CustomAuthenticationEntryPoint customAuthenticationEntryPoint;    @Bean    public CorsConfigurationSource corsConfigurationSource() {        CorsConfiguration corsConfiguration = new CorsConfiguration();        corsConfiguration.setAllowedOrigins(allowedOrigins);        corsConfiguration.setAllowedMethods(allowedMethods);        corsConfiguration.setAllowedHeaders(allowedHeaders);        corsConfiguration.setExposedHeaders(exposedHeaders);        corsConfiguration.setAllowCredentials(allowCredentials);        corsConfiguration.setMaxAge(maxAge);        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        source.registerCorsConfiguration("/**", corsConfiguration);        return source;    }    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {        httpSecurity                .csrf(AbstractHttpConfigurer::disable)                .cors(cors -> cors.configurationSource(corsConfigurationSource()))                .authorizeHttpRequests(                        auth -> auth                                .requestMatchers("/v3/api-docs/**").permitAll()                                .requestMatchers("/swagger-ui/**").permitAll()                                .requestMatchers("/api/auth/**").permitAll()                                .requestMatchers("/api/admin/**").hasRole("ADMIN")                                .requestMatchers("/api/user/**").hasRole("USER")                                .anyRequest().authenticated()                ).sessionManagement(                        sessionManagement -> sessionManagement.sessionCreationPolicy(SessionCreationPolicy.STATELESS)                ).addFilterBefore(                        jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class                ).exceptionHandling(                        exceptionHandling -> exceptionHandling.authenticationEntryPoint(customAuthenticationEntryPoint)                );        return httpSecurity.build();    }    @Bean    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration)            throws Exception {        return authenticationConfiguration.getAuthenticationManager();    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }}